name: C++ CI

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Debug - Start
        run: echo "Starting the job for Linux"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libboost-all-dev \
            cmake \
            openmpi-bin \
            libopenmpi-dev

      - name: Debug - Post install
        run: echo "Dependencies installed for Linux"

      - name: Create build directory
        run: mkdir -p build

      - name: Configure with CMake
        run: |
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }}
          
      - name: Build the project
        run: |
          cd build
          cmake --build .

      - name: Run tests
        run: |
          cd build
          cmake --build . --target test

      - name: Create package
        run: |
          cd build
          cmake --build . --target package

      - name: Debug - List contents of build directory after package creation
        run: ls -l ./build

      - name: Check if Linux package exists
        run: |
          if [ -f "./build/IFilterProject-0.1.0-Linux.sh" ]; then
            echo "Linux package exists."
          else
            echo "Linux package does not exist."
            exit 1
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Debug - List contents of build directory before upload
        run: ls -l ./build

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/IFilterProject-0.1.0-Linux.sh  # Убедитесь, что путь правильный для созданного пакета 
          asset_name: IFilterProject-0.1.0-Linux.sh 
          asset_content_type: application/x-sh

      - name: Debug - End
        run: echo "Ending the job for Linux"

      - name: Debug - List all files in build directory at the end of the job
        run: |
          echo "Current directory:"
          pwd
          echo "List of files in build directory:"
          ls -la ./build


  build-mac:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Debug - Start for macOS
        run: echo "Starting the job for macOS"

      - name: Install dependencies on macOS
        run: |
          brew update
          brew install boost cmake open-mpi

      - name: Debug - Post install for macOS
        run: echo "Dependencies installed for macOS"

      - name: Create build directory for macOS
        run: mkdir -p build

      - name: Configure with CMake for macOS
        run: |
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }}

      - name: Build the project for macOS
        run: |
          cd build
          cmake --build .

      - name: Create package for macOS
        run: |
          cd build
          cmake --build . --target package

      # Отладка перед проверкой существования пакета для macOS 
      - name : Debug – List contents of build directory after package creation 
        run : ls –l ./build 

      # Проверка существования пакета для macOS 
      - name : Check if macOS package exists 
        run : | 
           if [ –f "./build/IFilterProject-0.1.0-Darwin.dmg" ]; then 
             echo "macOS package exists." 
           else 
             echo "macOS package does not exist." 
             exit 1 
           fi 

       # Создание Release для macOS 
      - name : Create Release for macOS 
        id : create_release_macos 
        uses : actions/create-release@v1 
        env : 
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} 
        with : 
          tag_name : "release-macos-${{ github.run_number }}" 
          release_name : "Release macOS ${{ github.run_number }}" 
          draft : false 
          prerelease : false 

       # Загрузка артефактов для macOS 
      - name : Upload Release Asset (macOS) 
        uses : actions/upload-release-asset@v1 
        env :
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} 
        with :
          upload_url : ${{ steps.create_release_macos.outputs.upload_url }} 
          asset_path : ./build/IFilterProject-0.1.0-Darwin.dmg  
          asset_name : IFilterProject-0.1.0-Darwin.dmg  
          asset_content_type : application/x-apple-diskimage 

      - name : Debug – End  
        run : echo “Ending the job for macOS”  
