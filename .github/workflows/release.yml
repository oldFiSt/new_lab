name: C++ CI

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write  # Права на запись

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev cmake

      - name: Install dependencies on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew update
          brew install boost cmake

      - name: Create build directory and configure with CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }}

      - name: Build the project
        run: |
          cd build
          cmake --build .

      - name: Run tests
        run: |
          cd build
          cmake --build . --target test

      - name: Create package
        run: |
          cd build
          cmake --build . --target package
          ls -l ./build  # Вывод списка файлов в директории build

      # Отладка перед проверкой существования пакета
      - name: Debug - List contents of build directory
        run: |
          ls -l ./build

      # Проверка существования пакета для Linux
      - name: Check if Linux package exists
        if: ${{ runner.os == 'Linux' }}
        run: |
          if [ -f "./build/FilterProject-0.1.0-Linux.sh" ]; then  # Убедитесь, что имя файла правильное и путь правильный
            echo "Linux package exists."
          else
            echo "Linux package does not exist."
            exit 1
          fi

      # Создание релиза для Linux
      - name: Create Release for Linux
        if: ${{ runner.os == 'Linux' }}
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "linux-${{ github.run_number }}"
          release_name: "Release Linux ${{ github.run_number }}"
          draft: false
          prerelease: false

      # Еще один шаг отладки перед загрузкой ассета
      - name: Debug - List contents of build directory before upload
        run: |
          ls -l ./build

      - name: Upload Release Asset (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ./build/FilterProject-0.1.0-Linux.sh  # Убедитесь, что путь правильный для созданного пакета 
          asset_name: FilterProject-0.1.0-Linux.sh 
          asset_content_type: application/x-sh
